<?php
include_once $_SERVER['DOCUMENT_ROOT'] . "/" . explode("/", dirname($_SERVER['PHP_SELF']))[1] . "/app/config.php";

/*

	[ENTITY_NAME_UC]RestController

	Interface between DAO and WebService, to react to errors or set status codes

	Author: Patrick Notar

*/

class [ENTITY_NAME_UC]RestController extends BasicRestController {

    /**
     * Returns all [ENTITY_NAME_PLURAL] as JSON
     * @return string $response a JSON-String
     **/
    function getAll[ENTITY_NAME_UC_PLURAL]() {

        $[ENTITY_NAME]Dao = new [ENTITY_NAME_UC]DAO();
        $rawData = $[ENTITY_NAME]Dao->getAll[ENTITY_NAME_UC_PLURAL]();

        if (empty($rawData)) {
            $statusCode = 404;
            $rawData = array('error' => 'No [ENTITY_NAME_PLURAL] found!');
        } else {
            $statusCode = 200;
        }

        $this->setHttpHeaders($statusCode);
        $response = $this->encodeJson($rawData);
        echo $response;
    }

    /**
     * Returns Get values of a single [ENTITY_NAME] as JSON
     * @param int $id id of the [ENTITY_NAME]
     * @return string $response a JSON-String
     **/
    public function get[ENTITY_NAME_UC]($id) {

        $[ENTITY_NAME]Dao = new [ENTITY_NAME_UC]DAO($id);
        $rawData = $[ENTITY_NAME]Dao->get[ENTITY_NAME_UC]();

        if (empty($rawData)) {
            $statusCode = 404;
            $rawData = array('error' => 'No [ENTITY_NAME_PLURAL] found!');
        } else {
            $statusCode = 200;
        }

        $this->setHttpHeaders($statusCode);
        $response = $this->encodeJson($rawData);
        echo $response;

    }

    /**
     * Returns specific field from the [ENTITY_NAME] entity
     * @param int $id id of the [ENTITY_NAME]
     * @param string $field field of the [ENTITY_NAME] entity
     * @return string $response a JSON-String
     **/
    public function get($field, $id) {

        $[ENTITY_NAME]Dao = new [ENTITY_NAME_UC]DAO($id);
        $rawData = $[ENTITY_NAME]Dao->get($field);

        if (empty($rawData[$field])) {
            $statusCode = 404;
            $rawData = array('error' => 'No [ENTITY_NAME_PLURAL] found!');
        } else {
            $statusCode = 200;
        }

        $this->setHttpHeaders($statusCode);
        $response = $this->encodeJson($rawData);
        echo $response;
    }
}